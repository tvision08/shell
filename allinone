#!/bin/bash

#借chao鉴xi@233的颜色以及判断系统代码
red='\e[91m'
green='\e[92m'
yellow='\e[93m'
magenta='\e[95m'
cyan='\e[96m'
none='\e[0m'

init(){
	[[ $(id -u) != 0 ]] && echo -e "\n 哎呀……请使用 ${red}root ${none}用户运行 ${yellow}~(^_^) ${none}\n" && exit 1
	cmd="apt-get"
	# 笨笨的检测方法
if [[ $(command -v apt-get) || $(command -v yum) ]] && [[ $(command -v systemctl) ]]; then
	if [[ $(command -v yum) ]]; then
		cmd="yum"
	fi
else
	echo -e " 
	哈哈……这个 ${red}辣鸡脚本${none} 不支持你的系统。 ${yellow}(-_-) ${none}

	备注: 仅支持 Ubuntu 16+ / Debian 8+ / CentOS 7+ 系统
	" && exit 1
fi
$cmd install -y curl
}

menu(){
	clear
	echo -e ""
	echo -e "${yellow}1${none} 代理类（V2 55R）"
	echo -e "${yellow}2${none} 中转类（端口转发）"
	echo -e "${yellow}3${none} 系统类（锐速BBR/测速/软件源）"
	echo -e "${yellow}4${none} 安装程序"
	echo -e "${yellow}5${none} 杂项"
	echo -e "温馨提示...如果你不想执行选项...按 ${yellow}Ctrl + C$none 即可退出"
	echo -e ""
	read -p "$(echo -e "请选择脚本类型${yellow}[1-5]$none:")" menu_case
	echo -e ""
	case $menu_case in
	1)
	#echo -e "选择1 代理类"
	daili_menu
	;;
	2)
	#echo -e "选择2 中转类"
	zhongzhuan_menu
	;;
	3)
	#echo -e "选择3 系统类"
	xitong_menu
	;;
	4)
	#echo -e "选择4 安装程序"
	install_menu
	;;
	5)
	#echo -e "选择5 杂项"
	zaxiang_menu
	;;
	*)
	echo -e "输入不正确"
	sleep 1
	menu
	;;
	esac
}
daili_menu(){
	clear
	echo -e ""
	echo -e "${yellow}1${none} 233v2ray一键脚本"
	echo -e "${yellow}2${none} SSR 一键脚本"
	echo -e ""
	echo -e "${yellow}0${none} 返回主菜单"
	echo -e ""
	read -p "$(echo -e "请选择脚本类型${yellow}[1-2]$none:")"  daili
	echo -e ""
	case $daili in
	1)
	v2_233
	;;
	2)
	ssr
	;;
	0)
	menu
	;;
	esac
}

zhongzhuan_menu(){
	clear
	echo -e ""
	echo -e "${yellow}1${none} haproxy"
	echo -e "${yellow}2${none} brook-pf"
	echo -e ""
	echo -e "${yellow}0${none} 返回主菜单"
	echo -e ""
	read -p "$(echo -e "请选择脚本类型${yellow}[1-2]$none:")"  zhongzhuan
	case $zhongzhuan in
	1)
	haproxy
	;;
	2)
	brook-pf
	;;
	0)
	menu
	;;
	esac
}

xitong_menu(){
	clear
	echo -e ""
	echo -e "${yellow}1${none} 一键BBR/锐速三合一脚本"
	echo -e "${yellow}2${none} 一键测试网速"
	echo -e "${yellow}3${none} dd网络重装脚本"
	echo -e "${yellow}4${none} 配置Docker国内源"
	echo -e "${yellow}5${none} 测试回源线路"
	echo -e ""
	echo -e "${yellow}0${none} 返回主菜单"
	echo -e ""
	read -p "$(echo -e "请选择脚本类型${yellow}[1-4]$none:")"  xitong
	echo -e ""
	case $xitong in
	1)
	tcp
	;;
	2)
	superbench
	;;
	3)
	dd_net
	;;
	4)
	Docker_cn
	;;
	5)
	mtr_test
	;;
	0)
	menu
	;;
	esac
}

install_menu(){
	clear
	echo -e ""
	echo -e "${yellow}1${none} 安装Docker"
	echo -e "${yellow}2${none} 一键测试网速"
	echo -e ""
	echo -e "${yellow}0${none} 返回主菜单"
	echo -e ""
	read -p "$(echo -e "请选择脚本类型${yellow}[1-2]$none:")" install
	echo -e ""
	case $install in
	1)
	docker
	;;
	2)
	superbench
	;;
	0)
	menu
	;;
	esac
}

zaxiang_menu(){
	clear
	echo -e ""
	echo -e "${yellow}1${none} 生成自定义git.io短链接"
	echo -e ""
	echo -e "${yellow}0${none} 返回主菜单"
	echo -e ""
	read -p "$(echo -e "请选择脚本类型${yellow}[1-1]$none:")" zaxiang_menu_case
	echo -e ""
	case $zaxiang_menu_case in
	1)
	git_io
	;;
	2)
	
	;;
	0)
	menu
	;;
	esac
}

#代理类
v2_233(){
	bash <(curl -s -L https://cdn.jsdelivr.net/gh/233boy/v2ray@master/install.sh)
}

ssr(){
	echo -e "无"
}

#中转类

haproxy(){
	bash <(curl -s -L https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/haproxy.sh)
}

brook-pf(){
	bash <(curl -s -L https://raw.githubusercontent.com/ToyoDAdoubi/doubi/master/brook-pf.sh)
}

#系统类
tcp(){
	echo -e "安装完内核重启后需要再执行一次"
	sleep 3
	bash <(curl -s -L https://cdn.jsdelivr.net/gh/chiakge/Linux-NetSpeed@master/tcp.sh)
}

superbench(){
	bash <(curl -s -L https://raw.githubusercontent.com/oooldking/script/master/superbench_git.sh)
}

dd_net(){
	clear
	echo -e ""
	echo -e "${yellow}1${none} veip007"
	echo -e "${yellow}2${none} 真·究极·一键重装脚本"
	echo -e ""
	echo -e "${yellow}0${none} 返回主菜单"
	echo -e ""
	read -p "$(echo -e "请选择脚本类型${yellow}[1-2]$none:")" dd_net_case
	echo -e ""
	case $dd_net_case in
	1)
	dd_net_veip007
	;;
	2)
	bash <(curl -s -L https://git.io/AutoReinstall.sh)
	;;
	0)
	menu
	;;
	*)
	echo -e "${yellow}输入错误${none}"
	sleep 1
	dd_net
	;;
	esac
}
dd_net_veip007(){
	clear
	echo -e ""
	echo -e "${yellow}1${none} GoogleDrive源(速度快但国内连不上)"
	echo -e "${yellow}2${none} OneDrive源"
	echo -e ""
	echo -e "${yellow}0${none} 返回主菜单"
	echo -e ""
	read -p "$(echo -e "请选择脚本类型${yellow}[1-2]$none:")" dd_net_veip007_yuan
	echo -e ""
	case $dd_net_veip007_yuan in
	1)
	bash <(curl -s -L https://raw.githubusercontent.com/veip007/dd/master/dd-gd.sh)
	;;
	2)
	bash <(curl -s -L https://raw.githubusercontent.com/veip007/dd/master/dd-od.sh)
	;;
	0)
	menu
	;;
	*)
	echo -e "${yellow}输入错误${none}"
	sleep 1
	dd_net
	;;
	esac
}

Docker_cn(){
	echo -e '{\n"registry-mirrors": ["https://fpqqn4ib.mirror.aliyuncs.com"]\n}' > /etc/docker/daemon.json
	systemctl daemon-reload
	systemctl restart docker
	echo -e "\n已替换为国内源\n"
}

mtr_test(){
	echo -e "无"
}

#安装程序
docker(){
	clear
	echo -e ""
	echo -e "${yellow}1${none} 默认源"
	echo -e "${yellow}2${none} 阿里源(国内)"
	echo -e ""
	echo -e "${yellow}0${none} 返回主菜单"
	echo -e ""
	read -p "$(echo -e "请选择脚本类型${yellow}[1-2]$none:")"  install_yuan
	echo -e ""
	case $install_yuan in
	1)
	curl -fsSL https://get.docker.com | bash
	;;
	2)
	curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun
	;;
	0)
	menu
	;;
	esac
}

#杂项
git_io(){
	echo -e "请输入原Github长链接(带https://)："
	read uurl
	if [[ "$uurl" == "" ]]; then
		git_io
	elif [[ $(echo $uurl | grep github.com) == "" ]]; then
		clear
		echo -e "链接不正确\n"
		git_io
	figit 
	echo -e "请输入git.io短链接后缀(仅后缀)："
	read ccode
	if [[ "$ccode" == "" ]]; then
		git_io
	fi
		clear
		echo -e ""
		echo -e "原Github长链接为：${red}$uurl${none}\ngit.io短链接为：${red}https://git.io/$ccode${none}"
		read -p "确定无误请输入Y回车" git_io_yes
		if [[ "$git_io_yes" == [Yy] ]]; then
			curl -i https://git.io -F url=$uurl -F "code=$ccode"
			echo -e "\n短网址为：${red}https://git.io/$ccode${none}\n\n请自行测试是否成功\n"
		else
			git_io
		fi
	fi
}

init
menu
